use leg_simulator::LegComputer;
use std::io::Read;

const PROGRAM: &[u8] = &[
    18, 0, 19, 1, 177, 2, 177, 3, 177, 3, 182, 72, 178, 2, 178, 3, 178, 3, 178, 3, 214, 179, 208,
    179, 211, 243, 177, 2, 177, 3, 182, 128, 178, 0, 178, 3, 210, 243, 177, 3, 17, 0, 177, 1, 17,
    2, 177, 1, 182, 58, 178, 0, 223, 0, 144, 8, 18, 6, 19, 7, 159, 8, 18, 4, 19, 5, 0, 255, 97, 0,
    32, 2, 64, 1, 210, 81, 210, 178, 153, 248, 0, 0, 184, 4, 185, 3, 186, 2, 223, 16, 153, 6, 186,
    2, 176, 2, 35, 0, 67, 2, 210, 0, 210, 162, 159, 240, 186, 5, 185, 3, 187, 2, 177, 3, 99, 0,
    177, 3, 187, 4, 223, 178, 153, 6, 178, 0, 176, 0, 32, 1, 35, 2, 212, 48, 187, 255, 35, 3, 212,
    48, 178, 3, 216, 48, 210, 81, 210, 162, 178, 3, 210, 243, 177, 3, 177, 0, 159, 218, 186, 3,
    187, 2, 223, 178, 153, 4, 176, 2, 83, 2, 184, 2, 223, 195, 152, 38, 177, 2, 184, 3, 177, 0,
    211, 160, 177, 0, 182, 228, 178, 0, 178, 1, 178, 1, 210, 0, 177, 0, 184, 2, 177, 0, 182, 212,
    178, 0, 178, 0, 178, 0, 176, 2, 210, 243, 32, 2, 33, 3, 223, 16, 155, 12, 65, 2, 210, 162, 33,
    2, 65, 3, 64, 2, 159, 194,
];
const MEMORY: [u8; 256] = [
    45, 74, 16, 0, 8, 11, 12, 15, 79, 75, 33, 0, 69, 82, 82, 0, 68, 70, 85, 93, 93, 82, 95, 48, 54,
    57, 110, 27, 75, 8, 85, 9, 55, 30, 70, 54, 33, 89, 49, 12, 29, 64, 78, 3, 3, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let mut input: Vec<u8> = Vec::new();
    let input_len = std::io::stdin()
        .read_to_end(&mut input)
        .expect("Failed to read input");
    let mut memory = MEMORY.to_vec();

    let input_start_index = memory[0] as usize;
    memory[1] = (input_start_index + input_len) as u8;
    for i in 0..input_len {
        memory[input_start_index + i] = input[i];
    }

    let computer = LegComputer::new(PROGRAM.to_vec(), memory);
    let computer = computer.run();
    println!("{}", String::from_utf8(computer.memory[0..3].to_vec())?);

    Ok(())
}
